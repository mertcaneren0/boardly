// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum UserRole {
  ADMIN
  TEAM_MEMBER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  ON_HOLD
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum QuoteStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum Currency {
  USD
  EUR
  TRY
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  role          UserRole  @default(TEAM_MEMBER)
  avatar        String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  assignedTasks     Task[]       @relation("TaskAssignee")
  createdTasks      Task[]       @relation("TaskCreator")
  timeEntries       TimeEntry[]
  createdProjects   Project[]    @relation("ProjectCreator")
  projectMembers    ProjectMember[]
  comments          Comment[]
  activities        Activity[]
  createdQuotes     Quote[]      @relation("QuoteCreator")
  createdInvoices   Invoice[]    @relation("InvoiceCreator")
  transactions      Transaction[] @relation("TransactionCreator")
  accounts          Account[]
  sessions          Session[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  clientId    String
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  client        Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdBy     User            @relation("ProjectCreator", fields: [createdById], references: [id])
  tasks         Task[]
  files         ProjectFile[]
  notes         ProjectNote[]
  timeEntries   TimeEntry[]
  members       ProjectMember[]
  quotes        Quote[]
  invoices      Invoice[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String   @default("member") // member, lead, viewer
  joinedAt  DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  estimatedHours Float?
  projectId   String
  assigneeId  String?
  createdById String
  order       Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy   User         @relation("TaskCreator", fields: [createdById], references: [id])
  subTasks    SubTask[]
  comments    Comment[]
  timeEntries TimeEntry[]

  @@map("tasks")
}

model SubTask {
  id        String   @id @default(cuid())
  title     String
  isCompleted Boolean @default(false)
  taskId    String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("sub_tasks")
}

model TimeEntry {
  id          String   @id @default(cuid())
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?     // in minutes
  projectId   String
  taskId      String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task    Task?   @relation(fields: [taskId], references: [id], onDelete: SetNull)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Client {
  id          String   @id @default(cuid())
  companyName String
  vkn         String?  // Vergi Kimlik NumarasÄ±
  contactName String
  email       String
  phone       String?
  address     String?
  notes       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects  Project[]
  quotes    Quote[]
  invoices  Invoice[]

  @@map("clients")
}

model Quote {
  id          String      @id @default(cuid())
  quoteNumber String      @unique
  status      QuoteStatus @default(DRAFT)
  issueDate   DateTime    @default(now())
  validUntil  DateTime?
  subtotal    Float
  taxRate     Float     @default(0)
  taxAmount   Float
  total       Float
  notes       String?
  clientId    String
  projectId   String?
  createdById String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project     Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  createdBy   User          @relation("QuoteCreator", fields: [createdById], references: [id])
  items       QuoteItem[]

  @@map("quotes")
}

model QuoteItem {
  id          String   @id @default(cuid())
  description String
  quantity    Float
  unitPrice   Float
  total       Float
  quoteId     String
  order       Int      @default(0)

  // Relations
  quote Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@map("quote_items")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  status        InvoiceStatus @default(DRAFT)
  issueDate     DateTime      @default(now())
  dueDate       DateTime?
  subtotal      Float
  taxRate       Float       @default(0)
  taxAmount     Float
  total         Float
  notes         String?
  clientId      String
  projectId     String?
  createdById   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  client        Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project       Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  createdBy     User          @relation("InvoiceCreator", fields: [createdById], references: [id])
  items         InvoiceItem[]
  transactions  Transaction[]

  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  description String
  quantity    Float
  unitPrice   Float
  total       Float
  invoiceId   String
  order       Int      @default(0)

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  type        TransactionType
  currency    Currency        @default(USD)
  description String
  category    String?
  date        DateTime        @default(now())
  walletId    String?
  invoiceId   String?
  createdById String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  wallet      Wallet?         @relation(fields: [walletId], references: [id], onDelete: SetNull)
  invoice     Invoice?        @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  createdBy   User            @relation("TransactionCreator", fields: [createdById], references: [id])

  @@map("transactions")
}

model Wallet {
  id       String   @id @default(cuid())
  name     String
  currency Currency @default(USD)
  balance  Float  @default(0)
  isActive Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions Transaction[]

  @@map("wallets")
}

model ProjectFile {
  id        String   @id @default(cuid())
  name      String
  url       String
  size      Int
  type      String
  projectId String
  uploadedBy String
  createdAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_files")
}

model ProjectNote {
  id        String   @id @default(cuid())
  title     String
  content   String
  projectId String
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_notes")
}

model Activity {
  id        String   @id @default(cuid())
  action    String
  details   String?
  entityType String  // "project", "task", "quote", "invoice", etc.
  entityId  String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
